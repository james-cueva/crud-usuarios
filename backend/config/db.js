/* Importa Mongoose para trabajar con MongoDB
   Se instala con:
   npm install mongoose
*/
const mongoose = require('mongoose');

/* Conexi√≥n con la BD
   Es una funci√≥n as√≠ncrona llamada conectarDB.
   Es as√≠ncrona porque conectar a una base de datos
   es una operaci√≥n que puede tardar, y usamos await.
*/
const conectarDB = async () => { 
/* Bloque try-catch para manejar errores*/
  try {   
    /* Intenta conectarse a tu base de datos en MongoDB Atlas usando la cadena de conexi√≥n (URI de conexi√≥n) */
    await mongoose.connect('mongodb+srv://JamesBD:J4m3sBD@james.jnabvqb.mongodb.net/miapp?retryWrites=true&w=majority&appName=James');
/*  Si se conecta correctamente, muestra en consola:
    ‚úÖ Conectado a MongoDB Atlas.
*/
    console.log('‚úÖ Conectado a MongoDB Atlas');
/*  Si ocurre un error, se muestra el mensaje de error en consola
    y process.exit(1) detiene la aplicaci√≥n (√∫til para evitar que
    siga ejecut√°ndose con errores de conexi√≥n).
*/
  } catch (error) {
/*  ¬øQu√© hace console.error()?
       console.error() es un m√©todo de Node.js (y JavaScript en general)
       que muestra mensajes de error en la consola.  
       * Es como console.log(), pero est√° pensada espec√≠ficamente para errores.
       * Muestra los mensajes en color rojo
       * Internamente va por el canal stderr, no por el canal stdout.
           Cuando un programa (como uno hecho en Node.js) imprime algo
           en la consola, lo puede hacer a trav√©s de dos canales distintos:
           Canal	 Significado	                       Funci√≥n principal
           stdout	 Standard Output (salida est√°ndar)	 Para mostrar informaci√≥n "normal" del programa.
           stderr	 Standard Error (salida de errores)	 Para mostrar mensajes de error o advertencia.
           ¬øC√≥mo los usa Node.js?
           En Node.js:
           console.log() ‚Üí escribe en stdout.
           console.error() ‚Üí escribe en stderr.
           Ejemplo t√©cnico real:
           Sup√≥n que tienes este c√≥digo:
           console.log("Todo est√° funcionando");
           console.error("Hubo un error inesperado");   
           Al ejecutar este script, internamente:
           "Todo est√° funcionando" va por el canal stdout.
           "Hubo un error inesperado" va por el canal stderr.
           üñ•Ô∏è ¬øPor qu√© es √∫til separar stdout y stderr?
           Separar los canales tiene ventajas pr√°cticas:
           1. Filtrar o redirigir mensajes por separado:
              Puedes guardar los logs normales en un archivo, y los errores en otro.
               ¬øQu√© significa "logs"?
               Logs (en espa√±ol: registros) son mensajes de texto que genera un programa
               para indicar lo que est√° pasando mientras se ejecuta.
           2. Automatizaci√≥n y depuraci√≥n m√°s ordenada:
              Herramientas de despliegue y monitoreo como Docker, PM2 o Jenkins
              usan esa separaci√≥n para reportar errores o alertas.
           3. Resalta visualmente errores:
              Muchas terminales colorean stderr en rojo autom√°ticamente.

              error
              
              Imprimir√° en consola los detalles del error ocurrido

*/
    console.error('‚ùå Error al conectar a MongoDB:', error);
/*  ¬øQu√© es process.exit(1)?
    En Node.js, process es un objeto global que ya est√° disponible
    sin necesidad de importar nada.
    Representa el programa que se est√° ejecutando en ese momento.
    Significa que el objeto process:
    1. Contiene informaci√≥n sobre el entorno donde se est√° ejecutando tu aplicaci√≥n (por ejemplo el Sistema operativo).
    2. Controla aspectos del programa mientras corre (por ejemplo, salir del programa,
    leer argumentos, leer entradas del teclado, etc.).
    3. Es la interfaz entre tu c√≥digo y el sistema operativo
       que lo est√° ejecutando.
       process es como el puente o intermediario que le permite a tu programa 
       interactuar con el sistema operativo mientras se ejecuta.
       ¬øQu√© cosas del sistema operativo puedes controlar con process?
       1. Salir del programa ‚Üí process.exit()
       2. Leer argumentos
       3. Leer variables de entorno
       4. Leer desde el teclado o desde archivos de entrada ‚Üí process.stdin
          Es la forma en que el sistema operativo le pasa datos al programa.
       5. Escribir en la consola (terminal) ‚Üí process.stdout y process.stderr
          As√≠ tu programa puede enviar texto al sistema operativo para mostrarlo al usuario.
    El m√©todo exit() permite salir del programa.
    process.exit([c√≥digo]);
    El par√°metro opcional c√≥digo es un n√∫mero entero
    que indica c√≥mo termin√≥ el proceso.
    0 ‚Üí El proceso termin√≥ correctamente (sin errores).
    Cualquier otro valor (como 1) ‚Üí El proceso termin√≥ con errores.
    ¬øQu√© significa process.exit(1) espec√≠ficamente?
    Significa:
    Finaliza inmediatamente la ejecuci√≥n del programa porque ocurri√≥ un error.
    Lo usamos para:
    1. Evitar que la aplicaci√≥n contin√∫e ejecut√°ndose sin conexi√≥na la
       base de datos.
    2. Marcar que el proceso termin√≥ de forma incorrecta por un 
       error importante (como no poder acceder a la base de datos).
    3. Permitir a otros procesos o herramientas
       (como un sistema de despliegue o Docker)
       detectar que la app fall√≥ al iniciar.
    ¬øY si no se usara process.exit(1)?
    Sin eso, la app seguir√≠a funcionando, aunque no est√© conectada a MongoDB,
    lo que podr√≠a causar fallos silenciosos o errores m√°s adelante
    cuando intente acceder a datos.  
*/
    process.exit(1);
  }
};
// #region Exporta la funci√≥n conectarDB
/* ¬øQu√© es module?
   module es un objeto especial de Node.js que representa el m√≥dulo actual
   (es decir, el archivo .js que est√°s escribiendo).
   Cada archivo de Node.js es tratado como un m√≥dulo independiente,
   y module te da informaci√≥n sobre ese m√≥dulo.
   Ejemplo:
   En este archivo db.js:
   console.log(module);
   Esto mostrar√° algo como:
   {
     id: '.',
     path: '/ruta/del/proyecto',
     exports: {},
     filename: '/ruta/del/proyecto/db.js',
     ...
   }
   Observa que hay una propiedad llamada exports.
   Esto nos lleva al siguiente punto.  
   ¬øQu√© es exports?
   exports es una propiedad del objeto module,
   que por defecto es un objeto vac√≠o ({}).
   Puedes asignarle cualquier valor (funci√≥n, objeto, clase, etc.)
   para compartirlo con otros archivos.
   ¬øY qu√© significa module.exports = conectarDB;?
   Est√°s diciendo: "Este m√≥dulo (archivo) exporta la funci√≥n conectarDB".
   Cuando otro archivo use require('./db'),
   recibir√° lo que se export√≥ con module.exports.
*/
// #endregion
module.exports = conectarDB;
