/* models 
   Modelo = Model
   Un modelo en Mongoose representa
   la estructura de una colecci√≥n en tu base de datos.
   ¬øQu√© contiene la carpeta models?
   La carpeta models guarda todos los modelos Mongoose,
   es decir, los archivos donde defines:
   El esquema (schema) del documento.
   El modelo (model) basado en ese esquema.
   Y los exportas para que se puedan usar en los controladores y rutas.
*/

/* Importa Mongoose para trabajar con MongoDB

  Se instala con:
  npm install mongoose

  **Mongoose** (ODM para MongoDB)

  En el contexto de Mongoose y MongoDB,
  ODM significa Object Document Mapper
  (en espa√±ol, Mapeador de Documentos a Objetos).

  ¬øQu√© hace un ODM?

  Un ODM es similar a un
  ORM (Object Relational Mapper, en espa√±ol Mapeador relacional de objetos)
  usado en bases de datos SQL, pero est√° dise√±ado
  para bases de datos NoSQL como MongoDB,
  que trabajan con documentos en lugar de filas y tablas.

  Funciones principales de un ODM como Mongoose:

  1. Modelado de datos: Te permite definir esquemas (schemas) para los documentos.
     Por ejemplo, puedes definir qu√© campos tiene un documento,
     qu√© tipo de datos deben tener y si son obligatorios.

  2. Validaci√≥n: Verifica que los datos cumplan con las reglas del esquema
     antes de guardarlos.

  3. Consultas: Proporciona una API m√°s amigable para hacer operaciones
     como encontrar, actualizar o eliminar documentos.

  4. Middlewares: Puedes usar funciones que se ejecutan autom√°ticamente
     antes o despu√©s de ciertas operaciones, como save, find, update, etc.

  5. Hooks y m√©todos personalizados: Puedes definir m√©todos
     para usar en los documentos, o funciones que se ejecuten
     en momentos espec√≠ficos del ciclo de vida de un documento.    

     Aqu√≠, mongoose act√∫a como un ODM al permitirte trabajar
     con objetos JavaScript, que luego se guardan como documentos en MongoDB.

*/
const mongoose = require('mongoose');

/* Definir el esquema del documento "Usuario"
   El esquema es como una plantilla que dice
   qu√© campos tendr√° cada usuario en la base de datos
*/
const usuarioSchema = new mongoose.Schema({
  // üßç Campo: nombre del usuario
  nombre: {
    type: String, // Debe ser una cadena de texto
    required: [true, 'El nombre es obligatorio'], // El campo es obligatorio
    minlength: [3, 'El nombre debe tener al menos 3 caracteres'] // M√≠nimo 3 caracteres
  },
  // üéÇ Campo: edad del usuario
  edad: {
    type: Number, // Debe ser un n√∫mero
    required: [true, 'La edad es obligatoria'], // El campo es obligatorio
    min: [1, 'La edad m√≠nima es 1'], // Valor m√≠nimo permitido
    max: [120, 'La edad m√°xima es 120'] // Valor m√°ximo permitido
  }
});

/* Creamos el modelo "Usuario" a partir del esquema definido
   Este modelo es una clase que representa la colecci√≥n "usuarios"
   en la base de datos MongoDB.
*/
const Usuario = mongoose.model('Usuario', usuarioSchema);

/* Exportar el modelo para poder usarlo en otras partes del proyecto */
module.exports = Usuario;
