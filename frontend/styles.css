body {
  font-family: Arial, sans-serif;
  /* La propiedad max-width: 400px;
     en CSS significa que el ancho m√°ximo de un elemento
     no podr√° superar los 400 p√≠xeles, sin importar el tama√±o del contenedor
     o de la pantalla.
  */
  max-width: 400px;
  margin: 40px auto;
  padding: 20px;
  background-color: #f9f9f9;
}

h1, h2 {
  color: #333;
  text-align: center;
}

h2 {
  margin-top: 0px;
  color: #333;
  text-align: center;
}

form {
  margin-bottom: 20px;
  padding: 15px;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
}

input, button {
  display: block;
  margin: 10px 0;
  padding: 10px;
  width: 100%;
  box-sizing: border-box; /* Modelo de caja */
  font-size: 1rem;
}

button {
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  /* cursor: pointer;
     Cuando el usuario pase el mouse por encima de este elemento, cambia el cursor a una mano.
  */
  cursor: pointer;
}

/* button:hover
   :hover es un pseudoclase que se activa cuando el usuario pasa el cursor por encima del bot√≥n (sin hacer clic).
   Una pseudoclase en CSS es una palabra clave que a√±ades a un selector precedida por dos puntos (:), y que indica un estado o comportamiento especial del elemento.
*/
button:hover {
  background-color: #45a049;
}

ul {
  /* list-style-type: none;
     Esta propiedad elimina los puntos o vi√±etas que normalmente aparecen
     delante de los elementos en una lista <ul>.
  */
  list-style-type: none;
  padding: 0;
}

li {
  background-color: #fff;
  border: 1px solid #ddd;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 6px;
  /* display: flex;
     Esto convierte el elemento en un "contenedor flexible". En este caso, el elemento <li> (cada √≠tem de la lista) pasa a usar el modelo de dise√±o Flexbox.
     ¬øQu√© es Flexbox?
     Flexbox es un sistema de dise√±o en CSS que te permite organizar y alinear los elementos hijos (los elementos dentro del <li>, como texto y botones) de manera m√°s controlada y flexible.
     üß± ¬øQu√© pasa cuando pones display: flex en un <li>?
     Sup√≥n que tienes esto en HTML:
     <li>
       Nombre del usuario
       <button>Editar</button>
       <button>Eliminar</button>
     </li>
     Con display: flex, los hijos dentro del <li> (nombre y botones) se organizan en una fila horizontal, uno al lado del otro. Si no usas Flexbox, aparecer√≠an uno debajo del otro o se distribuir√≠an seg√∫n el flujo normal del HTML.
  */
  display: flex;
  /* justify-content: space-between;
     üîπ ¬øQu√© es justify-content?
     justify-content es una propiedad de CSS que se usa dentro de un contenedor display: flex o display: grid, y controla c√≥mo se distribuyen los elementos hijos a lo largo del eje principal del contenedor.
     ¬øQu√© es el "eje principal"?
     Si est√°s usando flex-direction: row (por defecto), el eje principal es horizontal (de izquierda a derecha, los elementos se colocan uno al lado del otro, en l√≠nea.).
     Si usas flex-direction: column, el eje principal es vertical (de arriba a abajo, los elementos se colocan uno debajo del otro.).
     üîπ ¬øQu√© hace space-between?
     Cuando usas:
     justify-content: space-between;
     Est√°s diciendo:
     "Quiero que el primer elemento est√© pegado al inicio, el √∫ltimo al final, y que todo el espacio restante se reparta equitativamente entre los elementos que hay en el medio."
  */
  justify-content: space-between;
  /* align-items: center;
     Esto es una propiedad muy usada en Flexbox para alinear elementos hijos a lo largo del eje cruzado (el eje secundario).
     üìå ¬øQu√© es align-items?
     align-items se usa dentro de un contenedor con display: flex para definir c√≥mo se alinean los elementos hijos a lo largo del eje cruzado (el eje perpendicular al eje principal).
     ‚úÖ ¬øQu√© hace align-items: center?
     Alinea todos los elementos hijos al centro del eje cruzado.
     Resultado visual:
     ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
     ‚ïë                                            ‚ïë
     ‚ïë     [Uno]    [Dos]     ‚Üê ambos centrados   ‚ïë
     ‚ïë                                            ‚ïë
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  */
  align-items: center;
}

li button {
  margin-left: 10px;
  background-color: #2196f3;
}

li button:last-child {
  background-color: #f44336;
}

li button:last-child:hover {
  background-color: #d32f2f;
}

.usuario-info {
  /* Con flex: 1;
     Ocupa el espacio disponible, empujando a los botones.
     Est√°s usando una abreviaci√≥n que equivale a esto:

     flex-grow: 1; -->	Permite que este elemento crezca para llenar espacio disponible en el eje principal (horizontal si no cambias flex-direction)..
     flex-shrink: 1; --> Permite que el elemento se reduzca si hay poco espacio (evita desbordes).
     flex-basis: 0; --> "Empiezo desde 0px de ancho. Estoy dispuesto a ocupar CERO, pero puedo crecer seg√∫n el espacio libre gracias al flex-grow."
     
     Como el span .usuario-info tiene flex-basis: 0, su tama√±o inicial es 0px, y el tama√±o inicial de cada boton es en base a su contenido;
     si por ejemplo cada boton tiene un contenido de 60 px, los dos botones sumarian un tama√±o minimo de 120 px.
     Puesto de que hay 480px sobrantes, se evaluaria la propiedad flex-grow:, y como el span .usuario-info tiene flex-grow: 1, y los botones flex-grow: 0 cada uno,
     el 100% del espacio disponible seria para el el span .usuario-info, es decir que ocuparia 480px. Puesto a que no hay espacio faltantes no se aplicaria flex-shrink,
     teniendo en cuenta que el span .usuario-info tiene flex-shrink:1 y los botones flex-shrink:1 cada uno.
  */
  flex: 1;
  font-weight: 500;
  font-size: 1rem;
}

.botones {
  /*Los botones no tienen flex configurado,
    por lo tanto heredan el valor por defecto de:
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: auto; El bot√≥n empieza desde el tama√±o de su contenido (por ejemplo, 60px), y luego puede crecer o encogerse si lo permites.
  */
  display: flex;
  /* gap: 8px;
     La propiedad gap: 8px; en CSS se utiliza para definir el espaciado entre elementos hijos dentro de un contenedor que tenga un layout de tipo flex o grid.
     üîç ¬øQu√© hace exactamente?
     gap: 8px; establece un espacio de 8 p√≠xeles entre las filas y/o columnas de los elementos hijos del contenedor.
     Esto dejar√° 8px de espacio horizontal entre cada elemento hijo.
  */
  gap: 8px;
}

/* Responsividad para m√≥viles */
@media (max-width: 480px) {
  body {
    margin: 10px;
    padding: 10px;
  }

  li {
    /* flex-direction: column;
       La propiedad flex-direction: column; en CSS se utiliza dentro de un
       contenedor flexible (es decir, un elemento con display: flex;)
       para indicar que los elementos hijos deben organizarse en una columna,
       es decir, de arriba hacia abajo.
    */
    flex-direction: column;
    /* align-items: center;
       Esta propiedad controla la alineaci√≥n en el eje cruzado (transversal), que en este caso es horizontal, porque la direcci√≥n principal ahora es vertical (column).
       Entonces:
       center en este contexto significa:
       ‚Üí Alinea los elementos hacia el centro del contenedor <li>.
    */
    align-items: center;
  }

  .botones {
    width: 100%;
    flex-direction: row;
    justify-content: center
  }

  .botones button {
    width: 40%;
    margin: 5px 0 0 0;
  }

  .usuario-info {
    margin-bottom: 8px;
  }
}

